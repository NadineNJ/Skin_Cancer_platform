1. What this Flask app does

It allows users to upload a skin image.

It predicts the type of skin cancer using a fine-tuned ResNet50 model.

It generates a detailed medical report for the prediction using an external LLM API (OpenRouter).

It stores the results in memory so users can:

See all submissions,GET
Delete a submissions,DELETE

2. Main part of codes :  1.1 Libraries :

Flask: Web framework to create API.

CORS: Allow frontend to call backend from a different domain.

TensorFlow/Keras: Used to load and run your trained CNN model.

Requests: Send HTTP requests (to OpenRouter API for LLM).

2.2 Setup Flask App

Flask(__name__): Creates the web app.

CORS(app): Allows your frontend (different domain) to access your backend without getting blocked


2.3 In-Memory Storage

submissions = []
submission_id_counter = 1


submissions: A list that will store all prediction results temporarily.
submission_id_counter: To give each submission a unique ID.





README : 
Skin Cancer Detection API (Flask Backend)
üìö Overview
This is a Flask-based backend application that allows:

Uploading an image of the skin.

Predicting the type of skin cancer.

Generating a detailed diagnostic report using an LLM (GPT-3.5-turbo via OpenRouter).

Managing prediction submissions (view, update, delete).

‚öôÔ∏è Tech Stack
Python

Flask

TensorFlow / Keras

OpenRouter API (GPT-3.5-turbo)

Postman for API testing

üì© Available API Endpoints
‚û°Ô∏è POST /predict
Description: Predict skin cancer type from an uploaded image and generate a medical report.

Request:

multipart/form-data

Key: image (the image file)


‚û°Ô∏è GET /submissions
Description: Retrieve all past predictions.

‚û°Ô∏è DELETE /submissions/<id>
Description: Delete a prediction by its ID